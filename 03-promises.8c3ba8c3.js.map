{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAaC,SAASC,cAAc,gBACpCC,EAAYF,SAASC,cAAc,eACnCE,EAAcH,SAASC,cAAc,iBAI3C,SAASG,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFI,EAAAd,GAASe,OAAOC,QAAQ,uBAAwCC,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAItEK,EAAAd,GAASe,OAAOG,QAAQ,sBAAuCD,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAGpEA,GACHU,QAAQC,IAAI,qBAA2BH,OAANR,G,CAhBXN,SAASC,cAAc,UA8B7BiB,iBAAiB,SAAS,SAAAC,GAC1CA,EAAMC,iBAEN,IADA,IAAId,EAAQP,EAAWsB,MAAQnB,EAAUmB,MAChCC,EAAI,EAAGA,EAAInB,EAAYkB,MAAOC,GAAK,EAC1CjB,SAAWiB,EACXhB,GAASA,EAETF,EAAckB,EADdhB,IAAUJ,EAAUmB,OAEpBL,QAAQC,IAAI,MAAmBH,OAAbQ,EAAE,aAAiBR,OAANR,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst inputDelay = document.querySelector('[name=delay]');\nconst inputStep = document.querySelector('[name=step]');\nconst inputAmount = document.querySelector('[name=amount]');\nconst createPromisesBtn = document.querySelector('button');\n// const form = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  setTimeout(() => {\n    if (shouldResolve) {\n      // Fulfill\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      // return Promise.resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      // Reject\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      // return Promise.reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  }, delay);\n  console.log(`delay z setTimout ${delay}`);\n}\n\n// form.addEventListener('input', () => {\n//   console.log('inputDelay');\n//   console.log(inputDelay.value);\n//   console.log('');\n//   console.log('inputStep');\n//   console.log(inputStep.value);\n//   console.log('');\n//   console.log('inputAmount');\n//   console.log(inputAmount.value);\n//   console.log('');\n// });\ncreatePromisesBtn.addEventListener('click', event => {\n  event.preventDefault();\n  let delay = inputDelay.value - inputStep.value;\n  for (let i = 0; i < inputAmount.value; i += 1) {\n    position = i;\n    delay = +delay;\n    delay += +inputStep.value;\n    createPromise(i, delay);\n    console.log(`i: ${i}, delay: ${delay}`);\n  }\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$inputDelay","document","querySelector","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","setTimeout","$parcel$interopDefault","Notify","success","concat","failure","console","log","addEventListener","event","preventDefault","value","i"],"version":3,"file":"03-promises.8c3ba8c3.js.map"}